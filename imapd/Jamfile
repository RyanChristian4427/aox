# declare directory, so we can build by running 'jam' in this directory
SubDir TOP imapd ;

# pull in the directories we need to build the programs named at the bottom:
# - lib

SubInclude TOP lib ;

# - our own subdirectories, with a -I pointing here
HDRS += [ FDirName $(TOP) imapd ] ;
SubInclude TOP imapd handlers ;
SubInclude TOP imapd auth ;
SubInclude TOP imapd db ;

# declare our own directory again, for the benefit of the Build rules below

SubDir TOP imapd ;

# a rule to build the address-testing file, and maybe others later?

rule Struct
{
    Depends $(<) : $(>) ;
    Clean clean : $(<) ;
    SEARCH on $(>) = $(SEARCH_SOURCE) ;
    MakeLocate $(<) : $(LOCATE_SOURCE) ;
}

actions Struct
{
    sed -e 's/##.*//' -e 's/[\\"]/\\&/g' < $(>) | \
	grep . | \
	sed -e 's/^/{ "/' -e 's/	/", "/g' -e 's/$/" },/'> $(<)
}

# build the struct file for address testing

Struct addresses.inc : addresses.test ;

# build the .o files in this directory

Build imap : imapd.cpp imap.cpp command.cpp cccp.cpp set.cpp mailbox.cpp 
	query.cpp address.cpp parser.cpp ;

Build logd : logd.cpp logserver.cpp ;

Build server : connection.cpp listener.cpp loop.cpp endpoint.cpp logger.cpp 
    configuration.cpp die.cpp table.cpp database.cpp cache.cpp ;

# the programs. these need to be last. magic. all Program calls need
# to be after all Build calls, since the Build puts object files into
# the sets used by Build.

Program imapd : imap server lib ;
LINKLIBS on imapd = -lz ;

Program logd : logd server lib ;
