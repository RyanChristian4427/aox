# No user-serviceable parts below this line. And none above it either ;)

PGUSER = postgres ;
JAMSETTINGS = Jamsettings ;
include $(JAMSETTINGS:D=$(TOP)) ;

VERSION = 0.94 ;

MKDIR = mkdir -p ;

if $(OPTIM) = "-O" {
    OPTIM = ;
}
OPTIM ?= ;
RANLIB = ;

if $(ICC) {
    C++ = icc ;
    C++FLAGS += -wd1476 ;
    BUILD = build/icc ;
}
else {
    C++ = g++ ;
    C++FLAGS += -Wall ;
    BUILD = build/gcc ;
    if $(OPTIM) {
        BUILD = build/gcc$(OPTIM) ;
    }

    if $(COV) {
        C++FLAGS += -fprofile-arcs -ftest-coverage ;
        BUILD = build/gcov ;
    }

    if $(CCACHE) {
        C++ = ccache g++ ;
    }
}

LINK = $(C++) ;

rule SubInclude
{
    if ! $($(<[1]))
    {
        Exit SubInclude $(<[1]) without prior SubDir $(<[1]) ;
    }

    local _tokens = $(SUBDIR_TOKENS) ;
    SubDir $(<) ;

    local a b ;
    for a in $(IncludedDirectories) {
        if $(a) = $(SUBDIR) {
            b = true ;
        }
    }

    if ! $(b) {
        IncludedDirectories += $(SUBDIR) ;
        include $(JAMFILE:D=$(SUBDIR)) ;
    }

    SubDir TOP $(_tokens) ;
}

rule Build
{
    LOCATE_TARGET = [ FDirName $(TOP) $(BUILD) $(SUBDIR_TOKENS) ] ;
    Objects $(>) ;
    set-$(<) += [ FGristFiles $(>:S=$(SUFOBJ)) ] ;
}

rule Executable
{
    local target ;
    Depends exe : $(<) ;
    Depends $(<) : $(set-$(>)) ;
    MakeLocate $(<) : [ FDirName $(TOP) bin ] ;
    Clean clean : $(<) ;
    Link $(<) : $(set-$(>)) ;
}

rule Program
{
    Executable $(<) : $(>) ;
    InstallBin $(INSTALLROOT)$(BINDIR) : $(<) ;
}

rule Server
{
    Executable $(<) : $(>) ;
    InstallBin $(INSTALLROOT)$(SBINDIR) : $(<) ;
}

actions EngraveConfig {
sed -e 's!$BINDIR!'$(BINDIR)'!' \
    -e 's!$SBINDIR!'$(SBINDIR)'!' \
    -e 's!$MANDIR!'$(MANDIR)'!' \
    -e 's!$LIBDIR!'$(LIBDIR)'!' \
    -e 's!$PIDFILEDIR!'$(PIDFILEDIR)'!' \
    -e 's!$JAILDIR!'$(JAILDIR)'!' \
    -e 's!$CONFIGDIR!'$(CONFIGDIR)'!' \
    -e 's!$LOGFILEMODE!'$(LOGFILEMODE)'!' \
    -e 's!$LOGFILE!'$(LOGFILE)'!' \
    -e 's!$DBNAME!'$(DBNAME)'!' \
    -e 's!$DBUSER!'$(DBUSER)'!' \
    -e 's!$DBADDRESS!'$(DBADDRESS)'!' \
    -e 's!$ORYXUSER!'$(ORYXUSER)'!' \
    -e 's!$ORYXGROUP!'$(ORYXGROUP)'!' \
    -e 's!$VERSION!'$(VERSION)'!' \
    < $(>) > $(<)
}


rule WriteShellConfig
{
    Depends [ FGristFiles $(<) ] : <>Jamsettings ;
    Depends install : $(<) ;
    Depends $(<) : $(LIBDIR) ;
}

actions WriteShellConfig
{
    echo "#!/bin/sh" >> $(<)
    echo "#" >> $(<)
    echo "# This file contains copies of some compile-time settings." >> $(<)
    echo "# It is sourced by some shell scripts. Many of the values" >> $(<)
    echo "# here are also compiled into binaries and other files, so" >> $(<)
    echo "# this file should not be changed." >> $(<)
    echo "#" >> $(<)
    echo "# To make changes, you can edit mailstore-"$(VERSION)"/Jamsettings" >> $(<)
    echo "# and recompile." >> $(<)
    echo "#" >> $(<)
    echo "# In case of questions, send mail to info@oryx.com." >> $(<)
    echo "#" >> $(<)

    echo PREFIX="'"$(PREFIX)"'" >> $(<)
    echo BINDIR="'"$(BINDIR)"'" >> $(<)
    echo SBINDIR="'"$(SBINDIR)"'" >> $(<)
    echo MANDIR="'"$(MANDIR)"'" >> $(<)
    echo PIDFILEDIR="'"$(PIDFILEDIR)"'" >> $(<)
    echo JAILDIR="'"$(JAILDIR)"'" >> $(<)
    echo CONFIGDIR="'"$(CONFIGDIR)"'" >> $(<)
    echo "# To move the logfile, edit $(CONFIGDIR)/mailstore.conf" >> $(<)
    echo "# Type 'man mailstore.conf' for details." >> $(<)
    echo LOGFILE="'"$(LOGFILE)"'" >> $(<)
    echo LOGFILEMODE="'"$(LOGFILEMODE)"'" >> $(<)

    if [ $(PGUSER) ]; then
        echo PGUSER="'"$(PGUSER)"'" >> $(<)
    else
        echo PGUSER='postgres' >> $(<)
    fi
    if [ $(PGBIN) ]; then
        echo PGBIN="'"$(PGBIN)"'" >> $(<)
    fi

    echo DBADDRESS="'"$(DBADDRESS)"'" >> $(<)
    echo DBNAME="'"$(DBNAME)"'" >> $(<)
    echo DBUSER="'"$(DBUSER)"'" >> $(<)
    if [ $(DBPASS) ]; then
        echo DBPASS="'"$(DBPASS)"'" >> $(<)
    fi
}


rule Doc {
    Depends doc : <doc>.made.$(<) ;

    RemoveDoc docclean ;
    Depends clean : docclean ;

    Clean clean : <doc>.made.$(<) ;
    Depends <doc>.made.$(<) : $(set-$(>):S=.cpp) ;
    Doc2 <doc>.made.$(<) : $(set-$(>):S=.cpp) ;
    Depends <doc>.made.$(<) : $(UDOCBIN) ;
    UDOCBIN = udoc ;
}

actions together RemoveDoc {
    echo rm -rf doc/man/man3
    echo rm -rf doc/html
}

actions together Doc2 bind UDOCBIN {
    $(UDOCBIN) -o 'Oryx Mail Systems GmbH' -u 'http://www.oryx.com' -m doc/man/man3 -w doc/html $(>)
    touch $(<)
}


# If you need to do horrid or perverse things that shouldn't be
# version-controlled, you can create a file called Jamhacks and do
# them there.
JAMHACKS = Jamhacks ;
NOCARE $(JAMHACKS:D=$(TOP)) ;
include $(JAMHACKS:D=$(TOP)) ;
