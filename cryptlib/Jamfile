SubDir TOP cryptlib ;

# hide variables that cryptlib shouldn't see
OrdinaryFLAGS = $(CCFLAGS) ;
CCFLAGS = -fomit-frame-pointer -O3 -mcpu=pentium ;
OrdinaryHDRS = $(HDRS) ;
HDRS = [ FDirName $(TOP) cryptlib ] ;
OrdinaryDEFINES = $(DEFINES) ;
DEFINES = DATA_LITTLEENDIAN NDEBUG OSVERSION=2 USE_ASM _REENTRANT __UNIX__ ;


# ORYX_STRIPPED strips down cryptlib. it's used in our version of
# cryptini.h. defining ORYX_STRIPPED makes testlib fail. (testlib also
# needs three files to be wriable: cryptlib/test/key_dual.p15,
# cryptlib/test/key_ren.p15 and cryptlib/test/key_test.p15).

# build a small cryptlib:
ORYX_STRIPPED = 1 ;
# ... or a testable one:
# ORYX_STRIPPED = ;

if $(ORYX_STRIPPED) {
    DEFINES += ORYX_STRIPPED ;
}

# include all the subdirectories
SubInclude TOP cryptlib bn ;
SubInclude TOP cryptlib cert ;
SubInclude TOP cryptlib crypt ;
SubInclude TOP cryptlib device ;
SubInclude TOP cryptlib envelope ;
SubInclude TOP cryptlib keyset ;
SubInclude TOP cryptlib libs ;
SubInclude TOP cryptlib misc ;
SubInclude TOP cryptlib session ;
SubInclude TOP cryptlib zlib ;

Build cryptlib : cryptapi.c cryptcfg.c cryptcrt.c cryptctx.c cryptdbx.c
    cryptdev.c cryptenv.c cryptkey.c cryptkrn.c cryptlib.c cryptmch.c
    cryptmis.c cryptses.c cryptusr.c ;

# work around brokenness by including test last, with an extra define
DEFINES += strnicmp=strncasecmp ;
SubInclude TOP cryptlib test ;

# we could wrap the above subinclude in the next if, but in that case
# 'jam clean' might not clean in cryptlib/test

# we only build the tests if there's reason to believe they'll work
if ! $(ORYX_STRIPPED) {
    Program testlib : cryptlib cryptlib-test ;
}

# recover the normal oryx variables
HDRS = $(OrdinaryHDRS) ;
DEFINES = $(OrdinaryDEFINES) ;
CCFLAGS = $(OrdinaryFLAGS) ;

# everyone who uses cryptlib must use -lpthread for the time being
LINKLIBS += -lpthread ;
