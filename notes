ocd needs work (mike@waspfactory.org)

  1. The code (along with user/mailbox) needs cleaning up.
  2. Should synchronise field names etc.


Don't duplicate the contents of address_fields in header_fields.

  The Injector should avoid inserting address fields into header_fields,
  and the HeaderFetcher should assemble addresses from address_fields.


AddressCache and FieldNameCache are utter crocks, and must die.


tls client support (smtp, postgresql)


Set up automatic injection regression/speed testing on penne.


We should be able to connect to Postgres as an unprivileged user.

  ms migrate could then ask for a different username and password to
  perform schema upgrades.


Fix shutdown

  There's no practical way to shutdown using ocd/ocadmin. Perhaps this
  is another aspect of the problem above.


Implement listext

  List and lsub are basically good now, but listext is only partially
  implemented, and not advertised. The implementation also trails the
  listext draft. Update and complete that.


Resource limits on memory allocation


Inbox lifetime/mailbox reuse

  A newly created used needs an inbox. Since the user name may be the
  same as a former user, the mailbox may exist already, and may
  contain messages belonging to the former user.

  This behaviour has the benefit that "ms create user" is a perfect
  undelete for "ms delete user", but if the new user has no relation
  to the previous homonymous user, our behaviour is less desirable.

  I assume ms create user needs a command-line argument and msconsole
  needs to prompt its user.


Add support for "ms restart now" and "ms restart gracefully"

  Complications include: Some daemon must run as root, outside the
  jail. ocd perhaps? For cluster use, things grow complicated very
  quickly.

  Preliminary approach: Have ocd run chrooted in BINDIR instead of
  JAILDIR, and by default listen only to a unix socket.


EXPUNGE fixes:

  Crab says: We need to do what RFC2180 says.

  Arnt says: RFC 2180 gives four possible approaches for FETCH and as
  many for STORE. IMO, as of this change our handling of STORE and
  FETCH is as good as any of those four. Less advanced, but a lot
  simpler.

  Hm. There is a bit of a race condition, e.g. if store and expunge
  are sent at the same time, or very nearly so. One of them will be
  processed first. If that's expunge, store will fail with a "no -
  database error". I suppose that's okay. It only happens if the store
  is processed before we spread the word about the expunged message.


Consider RFC2231:

  2231 says: IMAP4 [RFC-2060] servers SHOULD decode parameter value
  continuations when generating the BODY and BODYSTRUCTURE fetch
  attributes.

  Hopefully we don't need to care about this at all.

  Arnt's opinion: We're better off doing that at parse time. There's
  also some outlook breakage to support - it uses 2047 when it
  shouldn't.


Keeping stderr open

  Maybe we should keep it open forever. Maybe that should be a
  command-line option - but what should the default be?


Logging to syslog

  logfile=syslog:local2 could mean "log to syslog with the local2
  facility". that's ugly syntax. parsing and blah.

  if we implement this, the logd HUP handler can switch to syslog if
  it can't reopen the logfile.


We need a SIEVE interpreter.


Clean up SubDir/SubInclude

  Rename them as Modules. Module X, Use X. Tie library use and headers
  to modules, so users get just the -I and -l arguments needed from
  the modules used (even if the entire tree is being compiled).

  Also give Program a third argument, so it takes the result name, the
  file sets to compile, and (new ->) the file containing main()


Autoresponder

  We'll need one, nicely programmable, connected to our sieve.

  I was reminded of this by Google's wording:

  Thank you for writing to Google. This automated response is just to
  let you know that we've received your email, and you'll hear from us
  soon.

  Thank you for using Google.

  Regards,
  The Google Team


Search folders

  This gets more tricky each time I think about it. In particular, if
  the search encompasses dynamic message attributes, then assigning
  UIDs reliably requires us to store the UIDs in the database.


ANNOTATE support

  Annotations are good. We want them. They're easy for us. By now the
  draft should be stable, so we can implement whenever we want to and
  have the time.


ANNOTATEMORE

  Ditto. Separate point so that we can do one without the other.


Message arrival tag

  Once annotate is done, we want a tag, ie. a magic annotation which
  stays glued to the message wherever it goes, even after copy/move.

  We also want a way to store the original RFC822 format somewhere
  inside and/or outside the database, indexed by the arrival tag
  identifier. It's good if the tag is split, so we can have "x-y"
  where X is the CD/DVD number and Y is the file on the CD/DVD. Or
  something like that.


Message Retention Policy Framework

  A lot of sites will want explicit policies regarding what mail may
  not be deleted, what may be deleted, and what must be deleted. We
  can support that well.


SASL NTLM authentication

  It may be odd and undocumented, and it may not be as strong as
  DIGEST-MD5, but it's implemented in Certain Clients ;)

  http://www.innovation.ch/java/ntlm.html seems to be a reasonable
  description. Cyrus also implements it.


"Writing Secure Code"

  We have a page about security, /mailstore/security.html, and a
  section of the mailstore.7 man page mentions it too.

  We need to look at ISBN 0735617228 and improve security.html with
  points from it. It could also be that we'll improve the code itself.


udoc stuff:

  1. Support a single level of nested classes. (What file names to use
     for output?)
  2. Support enum annotation.
  3. Suppress empty <p>, duplicate anchor names in output.


Udoc web pages chores

  Add "Related Pages" etc. Clarify where background.html
  fits. usage.html is an orphan now; should it become a manpage?


Make the httpd do archive pages

  Shouldn't we be most of the way there? Need partial result pages and
  real searching, though.

  Notify denis@startsiden.no when external testers might want to look
  at it.


archives.oryx.com

  Mostly need httpd archiving.


Miscellaneous cleanups:

  * Get rid of Blah::setup wherever possible
  * Avoid unnecessary header file inclusion
  * Enable the #ifdef'ed out tests
  * Do the "uint characters[256]" thing to simplify parsing.


GC speedups

  At the moment, sweep() tends to look at all of RAM. if we move the
  .marked bits into a bitmap like the "allocated" bitmap, we can avoid
  that.

  It would also be very good if we could avoid sweeping every
  Allocator during every sweep. Perhaps we should sweep only
  Allocators that are full or have seen some activity. Or something.


C/R

  C/R sucks. But it has its uses, so we can benefit from implementing
  it somehow. Here are some classes of messages we may want to treat
  specially:

  - replies to own mail
  - messages in languages not understood by the user
  - mail from previously unknown addresses
  - mail from freemail providers
  - vacation responses from unknowns
  - messages likely, but not certain to be out-of-office-autoreply

  The questions are: How can we ensure that we almost never challenge
  real mail, while simultaneously challenging most/all messages that
  don't come from valid senders? How can we provide suitable
  configuration?


DELETE of mailboxes in inappropriately qualified (security problem)

  At present, the user always needs to have all three rights, and
  there's a race condition against append/copy. It would be better to
  grab the uidnext lock and do more fine-grained checking:

  1. Require DeleteMessages unless all messages have \deleted.

  2. Require Expunge if there are any messages at all.

  The race condition means it's possible to append to a mailbox
  while it's being deleted, and the message will reappear if the
  mailbox is later recreated.


RENAME isn't implemented

  Implementing it should be a reasonably simple matter. May be best
  to put it off until ocd forwards information about mailboxes,
  though.


Case sensitivity

  Do we want case sensitive user names? Email addresses? I think not,
  but perhaps some sites do want that.

  If we have any case sensitivity, we should try to be case-friendly:

     a login AbhIjIt "QREWCejfhfeuwhrxfa"
     * ALERT User name "Abhijit", not "AbhIjIt"
     a NO no such user

  Bad security? User-friendly.


RFC 2359

  Not really important, but simple and nice. arnt started on it, and
  will probably finish it eventually.

  Status now is that all seems okay, but we don't have COPY at all.


Split the folder view into pages.

  The injector needs to do threading to make the paging possible.


The tsearch2 trigger doesn't work

  "Can't find configuration by locale" errors, and they make the
  Injector very unhappy.


A failing parse message should invalidate the prepared statement cache.


We should reject 8-bit content in headers.

  > Is that to say that we don't?

  I found a message with some junk in the header (^H and some other
  stuff) killed Postgres (A message saying "Unicode characters above
  0x10000 are not supported", then a server crash) when I delivered it.
  It wasn't in a field that could be 2047 encoded, and I can't see what
  to do about it other than reject it. We certainly shouldn't be trying
  to feed it into Postgres unmodified.

  > I know that we don't in the cases where we discard the data
  > unparsed. For example, comments in Date fields. But do we reject
  > anything else? And what are the arguments for rejecting, anyway?
  >
  > (Not trying to be a bastard. This one just seemed a little short on
  > self-evidential truth.)


Play with PITR and write /ams/pitr.html


Update doc/recorder.man

  Must decide whether to use .SS or .IP, etc.


Look into supporting the MySQL protocol after 1.0


Look at cryptlib error messages after 0.96.

  We report some things as errors that may be just ordinary EOF-like
  conditions.


We need to support date field searches.


Orphaned bodyparts should be cleaned up somehow.

  'ms vacuum' now does this, but it requires a full-table lock on
  mailboxes in order to not zap bodyparts that the injector hasn't
  linked to part_numbers yet (cf. injector.cpp:640).

  Unfortunate, but how can it be done better without savepoints?


We need mUTF-7 support.


We need more IMAP scripts and message parsing and assembly tests.


Write better field wrapping code

  HeaderField::wrap is terribly hackish right now. Besides, ::unwrap()
  should become the higher-level parser's job.


We assume that all Content-Type fields conform to MIME.

  In fact, RFC 1049 defines a non-MIME Content-Type (and Arnt says the
  Sun mailer had an incompatible one). The "Content-Type: text" parser
  hack I added turns out to have been for such a non-MIME field.

  I don't know what to do about this.

  We do nothing about it until we see user demand for it. If/when we
  do see that, we'll discuss the need with that user.


We should be able to use a read-only local database mirror.

  That way, we can play nicely with most replication systems.

  The way to do it: add a new db-mirror setting pointing to a
  read-only database mirror. all queries that update are sent to
  db-address, all selects are sent to db-mirror. db-mirror defaults to
  db-address.


canonical and deliver need severe cleaning up.


Finish the valgrind skin that should help us to diagnose memory abuse.


Look over RFC 3501 to see what is left unimplemented.


Finish the comparison with cyrus-imapd (which I'll install on fugue).

  What comparison is this? Will it end up as a file in corp/docs/misc,
  on our web site, or where?


Read the GiST papers and look at tsearch2 again.


Complete POP3 support.


Complete ACL support.


Implement COPY (for IMAP messages).


Make http://oryx.com not be broken (and oryx.{,co.}in too).

  (Arnt can do this using one of his many new IP addresses.)


Improve LogPane so it doesn't eat so much CPU

  The right way is to have a constant number of list view items, each
  of which look at a circular buffer. GuiLog just overwrites the
  "next" item in the circular buffer.

  Or would it be better to use a list? Not sure.


Mailbox migration looks worse and worse

  Once, UpdateSchema::execute was too big for a screen. Then it became
  to big for a sheet of printout. Before it gets too large for a
  600-sheet paper tray, we have to break it up into n smaller
  functions ;)

  It seems sensible to introduce 'ms migrate' and perhaps 'ms migrate
  -n' at the same time.

  'ms migrate -n' could write an 1-2-line description of the first
  schema upgrade to be done, do it, report whether it failed, then
  roll the transaction back instead of committing it.


ms add user spews errors

  # /usr/local/mailstore/bin/ms add user arnt secret arnt@oryx.com
  /usr/local/mailstore/bin/ms: SQL error: duplicate key violates unique constraint "mailboxes_name_key"
  /usr/local/mailstore/bin/ms: SQL error: duplicate key violates unique constraint "mailboxes_name_key"
  /usr/local/mailstore/bin/ms: SQL error: duplicate key violates unique constraint "mailboxes_name_key"
  /usr/local/mailstore/bin/ms: SQL error: duplicate key violates unique constraint "mailboxes_name_key"
  /usr/local/mailstore/bin/ms: SQL error: duplicate key violates unique constraint "mailboxes_name_key"

  Should be easyish to fix.


Startup failures have bad error messages

  When we cannot connect to something, we need to say what. "Port
  2054" is too cryptic even for me (Arnt).

  The man page for each program should say what it needs to
  connect. And I supose it had better list the configuration variables
  used by that program, too.


Document IPC structure

  Some man page, or some web page, or both, should say who's
  connnecting to who and why.


Add Maildir support to the migrator.


/events/solutionslinux-2006.html needs a plausible audience/task.

  We'll use that to do a better job of /events/linuxtag-2005.html


Should we allow Sender-less multiple-From mailboxes?


There is no reason to have the EventLoop/Loop split any more.


Implement more encodings: BIG5/SJIS/GBK. (AMS)


Implement a "save mangled copy" feature in msconsole. (AMS)

  People can use this to send us copies of messages that cause injection
  errors, without having to go through them by hand to remove sensitive
  information.


Get more word lists for Codec::byString( const String & )

  Word lists need to contain at least one non-ASCII character, and to
  be fairly common words. Such lists are available from a few sources,
  including but not limited to:

  1. Project Gutenberg has ebooks from which we could generate lists.
  2. /usr/dict/words exists in many languages.
  3. ispell, but there may be license issues.
  4. http://wortschatz.uni-leipzig.de/html/wliste.html


Use Codec::byString() to handle just-send-8

  But first, put together lots of tests. And before that, enjoy what's
  left of a Friday evening.


Add a web page about the charset encoding.

  It's a novel and good algorithm, so we can make a good page about
  it. We also can link to data sources there.

  The documentation for Codec::byString() should mention that page's
  URL.


Make a web page about our licensing

  Not sure what to say there. the purpose of the page would be to
  direct people to one of the two others, really. and to be linked to
  from the home page.


The "Database" link on home page

  Where should it go? People might click it wondering why to use a
  database instead of flat files and wanting to know what we do with
  databases.


Interop pages

  A variety needed.


Protocols supported

  A list detailing what our general idea is (internet standard,
  interoperability, utility) and linking to each actual protocol page.

  The URL for this is difficult.


Search ourselves, not via google

  Or maybe farm that out, get google to search with an approximation
  of our design. http://www.google.com/faq_freewebsearch.html may be
  interesting.


We should test multipart/signed and multipart/encrypted support.

  We must add a selection of RFC 1847 messages to canonical, and make
  sure they survive the round trip. No doubt there will be bugs.


Recording the build source wouldn't be bad.

  tarball could establish the identity conclusively:

  p4 have Jamfile | sed 's/\/Jamfile.*//'
  p4 counter change

  It would then need to sync the temporary client to that change
  instead of to head. Fine.

  This would naturally go into the 'what was built' field. But I don't
  like tarball changing anything. Should we perhaps have a new file,
  buildinfo, with one-per-line fields that eventually are shown by 'ms
  show build'?

  $ cat buildinfo
  Source tree: //oryx/rel/0.97
  Change number: 50894

  Any distributors wanting to add patches would be encouraged to add
  something to the file. Or should we pick up buildinfo.*, so people
  can add their own files?


ms can help (read: take over the function of) scripts/installer

  In the long run, it may save us the sort of trouble we've had in the
  past with shell hackery.


Something confuses Address::uname() and Address::name()

  As a result, we send unlabelled 8-bit content in display-names if
  the name cannot be expressed in either 8859-1, 8859-2 or koi8-r.

  I think the underlying reason is that we're not using UString, so
  the compiler's type checking does nothing for us.

  This is easy to demoonstrate with 22 right now, but it won't be
  shortly - I'll make a separate change which accidentally obliterates
  the difference.


We should store bodyparts.text for HTML/PDF/DOC.

  We need non-GPLed code to convert PDF and DOC to plaintext. We already
  have (from Mailchen) code to convert HTML.


We should tolerate duplicated header fields, iff:

  1. The RFC says there should be at most one instance of the field.
  2. When parsed and regenerated, the two fields have the same value.

  It's a safe, loss-less workaround for known brokenness (such as the
  tendency of the lemonade list to send 2 Mime-Version or CTE fields).

  We do this for CTE and MV right now. If we see any more instances of
  duplicates in the wild, I'll generalise the code in Header::repair to
  handle them all as described above.


CAcert instead of self-signed certificate?

  www.cacert.org offers free certificates and seems to be an
  up-and-coming thing.  In a few months, we may want to add 'obtain
  valid cert from cacert' to ms or msconsole.

  Or better yet, add a wizard to msconsole to get a real cert.

  Btw, cacert.org is a very nice place to get praise and a link from. High
  nerd factor. If we have the first really-easy-to-use interface to
  get cacert interfaces into a program, they'll do that, no doubt.


0.98

  Upgrade to cryptlib 3.2.1 (Done).
  Write a GB2312 codec.
  Fix the ocd problem (Done).
  Textify HTML bodyparts.
  Fix the 8-bit problems in Address.
  Make msconsole's user pane work.
  Fix tsearch2.
  ms vacuum (Sort of done).

  (All of these items have their own separate notes.)


0.99

  What should we do for 0.99?


We need to do the right thing.
