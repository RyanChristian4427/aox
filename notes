Add support for RFC 2047 encoding


We need to preserve the order of trace fields in the header.

  The Return-Path and Received fields must be reproduced in the same
  order that we saw them. We make no attempt to do this yet. Perhaps
  the right thing to do is to add a separate trace_fields table with
  relative position numbers.


tlsproxy doesn't handle eof (or errors) well


What to do about EventHandlers whose targets have died?

  For example, smtpd usually segfaults when we interrupt deliver, when
  SmtpDbClient tries to execute() a non-existent SMTP server.


Investigate the segfaults in "ms create user" on Debian.


ocd needs work

  1. Must announce new mail.
  2. The code needs cleaning up.
  3. Should synchronise field names etc.


User/Mailbox need a bit of an overhaul.


We need top-level message/rfc822 support


tls client support (smtp, postgresql)


configuration overhaul


We need an IMAP test suite

  Of course we will both remember what Arnt wrote in email, and our
  thoughts concerning this subject. Therefore there's no point in making
  notes. ;)


We should not duplicate the contents of address_fields in header_fields.

  The Injector should avoid inserting address fields into header_fields,
  and the HeaderFetcher should assemble addresses from address_fields.
  (If we split trace_fields out, then it should do the same for them.)


ms password user ams newpassword

  Must add that. Notify mike@waspfactory.org.


Fix shutdown

  There's no practical way to shutdown using ocd/ocadmin. Perhaps this
  is another aspect of the problem above.


Make smtpclient and deliver a lot more robust

  They work for now, but they don't work well. We need a -v -v, at
  least. Better code wouldn't be a bad thing either.


Implement listext

  List and lsub are basically good now, but listext is only partially
  implemented, and not advertised. The implementation also trails the
  listext draft. Update and complete that.


Resource limits on memory allocation


Signal handling

  What is the appropriate way to handle unknown signals?  (Or
  generally, any unpredictable occurence in untested circumstances.)
  Arnt sez: Follow the system default.

  SIGHUP is known: Users use it to mean "reopen the logfile" or
  "reread the config".

  Other known signals?


inject a large number of messages, collect query statistics


The GUI should do something


Set up and play with Tsearch2


Inbox lifetime/mailbox reuse

  A newly created used needs an inbox. Since the user name may be the
  same as a former user, the mailbox may exist already, and may
  contain messages belonging to the former user.

  This behaviour has the benefit that "ms create user" is a perfect
  undelete for "ms delete user", but if the new user has no relation
  to the previous homonymous user, our behaviour is less desirable.

  I assume ms create user needs a command-line argument and msconsole
  needs to prompt its user.


Add support for "ms restart now" and "ms restart gracefully"

  Complications include: Some daemon must run as root, outside the
  jail. ocd perhaps? For cluster use, things grow complicated very
  quickly.

  Preliminary approach: Have ocd run chrooted in BINDIR instead of
  JAILDIR, and by default listen only to a unix socket.


FETCH fixes:

  Currently we're always peeking; "fetch 1 body[1]" does not change
  the seen flag.


EXPUNGE fixes:

  Crab says: We need to do what RFC2180 says.

  Arnt says: RFC 2180 gives four possible approaches for FETCH and as
  many for STORE. IMO, as of this change our handling of STORE and
  FETCH is as good as any of those four. Less advanced, but a lot
  simpler.

  Hm. There is a bit of a race condition, e.g. if store and expunge
  are sent at the same time, or very nearly so. One of them will be
  processed first. If that's expunge, store will fail with a "no -
  database error". I suppose that's okay. It only happens if the store
  is processed before we spread the word about the expunged message.


Consider RFC2231:

  2231 says: IMAP4 [RFC-2060] servers SHOULD decode parameter value
  continuations when generating the BODY and BODYSTRUCTURE fetch
  attributes.

  Hopefully we don't need to care about this at all.

  Arnt's opinion: We're better off doing that at parse time. There's
  also some outlook breakage to support - it uses 2047 when it
  shouldn't.


logging cleanups

  Mostly done now. I need to do another quick sweep to ensure that the
  various Logs are created in the right context. Furthermore, the Loop
  should not be calling commit() for every Connection; and they should
  each set their Log/Arena correctly in their Scope.


Keeping stderr open

  Maybe we should keep it open forever. Maybe that should be a
  command-line option - but what should the default be?


Logging to syslog

  logfile=syslog:local2 could mean "log to syslog with the local2
  facility". that's ugly syntax. parsing and blah.

  if we implement this, the logd HUP handler can switch to syslog if
  it can't reopen the logfile.


Logfile mode

  logfile-mode = 400

  logd.cpp can call negate the mode and call umask(). Jamsettings can
  express distribution policy.


Can we use COPY to speed up bulk mail insertion?


We need a SIEVE interpreter.


Clean up SubDir/SubInclude

  Rename them as Modules. Module X, Use X. Tie library use and headers
  to modules, so users get just the -I and -l arguments needed from
  the modules used (even if the entire tree is being compiled).

  Also give Program a third argument, so it takes the result name, the
  file sets to compile, and (new ->) the file containing main()


Autoresponder

  We'll need one, nicely programmable, connected to our sieve.

  I was reminded of this by Google's wording:

  Thank you for writing to Google. This automated response is just to
  let you know that we've received your email, and you'll hear from us
  soon.

  Thank you for using Google.

  Regards,
  The Google Team


Search folders

  This gets more tricky each time I think about it. In particular, if
  the search encompasses dynamic message attributes, then assigning
  UIDs reliably requires us to store the UIDs in the database.


ANNOTATE support

  Annotations are good. We want them. They're easy for us. By now the
  draft should be stable, so we can implement whenever we want to and
  have the time.


ANNOTATEMORE

  Ditto. Separate point so that we can do one without the other.


Message arrival tag

  Once annotate is done, we want a tag, ie. a magic annotation which
  stays glued to the message wherever it goes, even after copy/move.

  We also want a way to store the original RFC822 format somewhere
  inside and/or outside the database, indexed by the arrival tag
  identifier. It's good if the tag is split, so we can have "x-y"
  where X is the CD/DVD number and Y is the file on the CD/DVD. Or
  something like that.


Message Retention Policy Framework

  A lot of sites will want explicit policies regarding what mail may
  not be deleted, what may be deleted, and what must be deleted. We
  can support that well.


SASL NTLM authentication

  It may be odd and undocumented, and it may not be as strong as
  DIGEST-MD5, but it's implemented in Certain Clients ;)

  http://www.innovation.ch/java/ntlm.html seems to be a reasonable
  description. Cyrus also implements it.


Use an unbreakable hash function to hash bodyparts!

  MD5 is broken, and we should be moving away from it.
  SHA-1 is broken, just in time to save us from moving to it.

  Since we know no unbreakable hash functions, we'll do nothing.


Per-MTA installation and use

  We need http://www.oryx.com/mailstore/exim.html and friends, plus a
  section in src/doc/mailstore.man.

  MTAs worth documenting in this way: Postfix, sendmail, exim,
  qmail/netqmail. More?

  Notify mike@waspfactory.org


Schema documentation

  I've done all I want to sql-schema.html and postgres.schema; I'll have
  to wait for Sujai's diagram to complete schema.html, but until then, I
  have done all I can to it.


Web site proofreading

  Need a comprehensive proofreading session.


Web Style Guide

  Must add a section about the phrasing, what sort of language we
  used. Added by request of the CTO.

  Also a section on terminology. Manpage, man page or manual page?


Web page appearance/voice

  Right now, our pages look much the same, but differ in detail. It'd
  be good to have a formally decided look and feel, and update the
  pages to use that, and only that. For example, what's the "related
  pages" headline called, "pages" or "links", and is the second word
  capitalized?


"Writing Secure Code"

  We have a page about security, /mailstore/security.html, and a
  section of the mailstore.7 man page mentions it too.

  We need to look at ISBN 0735617228 and improve security.html with
  points from it. It could also be that we'll improve the code itself.


Write to the alistapart chap who wrote about @media after 0.91.


Udoc nested classes

  Udoc should support a single level of nested classes. Several levels
  aren't necessary.

  Unsure what file names to use for output.


Udoc enums

  Not supported now. That needs fixing eventually.


Udoc web pages chores

  Add "Related Pages" etc. Clarify where background.html
  fits. usage.html is an orphan now; should it become a manpage?


HTML tidy fixes: suppress empty <p>, duplicate anchor names.


archives.oryx.com


test with more imap clients (corp/docs/misc/mua-list)

  Why do we have one list in mua-list and another in imap.html?


Miscellaneous cleanups:

  * Get rid of Blah::setup wherever possible
  * Avoid unnecessary header file inclusion
  * Enable the #ifdef'ed out tests
  * Do the "uint characters[256]" thing to simplify parsing.


