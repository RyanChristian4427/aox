ocd needs work (mike@waspfactory.org)

  1. The code (along with user/mailbox) needs cleaning up.
  2. Should synchronise field names etc.


We should not duplicate the contents of address_fields in header_fields.

  The Injector should avoid inserting address fields into header_fields,
  and the HeaderFetcher should assemble addresses from address_fields.


AddressCache and FieldNameCache are utter crocks, and must die.


tls client support (smtp, postgresql)


Set up automatic injection regression/speed testing on penne after the
Injector becomes stable again.


Discuss the ever-present problem of content in unlabelled charsets and
encodings.


It would be nice if we could connect to the database as an unprivileged
user, and have "ms migrate" ask for a different username and password to
perform schema upgrades.


Fix shutdown

  There's no practical way to shutdown using ocd/ocadmin. Perhaps this
  is another aspect of the problem above.


Make smtpclient and deliver a lot more robust

  They work for now, but they don't work well. We need a -v -v, at
  least. Better code wouldn't be a bad thing either.


Implement listext

  List and lsub are basically good now, but listext is only partially
  implemented, and not advertised. The implementation also trails the
  listext draft. Update and complete that.


Resource limits on memory allocation


Set up and play with PITR


Inbox lifetime/mailbox reuse

  A newly created used needs an inbox. Since the user name may be the
  same as a former user, the mailbox may exist already, and may
  contain messages belonging to the former user.

  This behaviour has the benefit that "ms create user" is a perfect
  undelete for "ms delete user", but if the new user has no relation
  to the previous homonymous user, our behaviour is less desirable.

  I assume ms create user needs a command-line argument and msconsole
  needs to prompt its user.


Add support for "ms restart now" and "ms restart gracefully"

  Complications include: Some daemon must run as root, outside the
  jail. ocd perhaps? For cluster use, things grow complicated very
  quickly.

  Preliminary approach: Have ocd run chrooted in BINDIR instead of
  JAILDIR, and by default listen only to a unix socket.


EXPUNGE fixes:

  Crab says: We need to do what RFC2180 says.

  Arnt says: RFC 2180 gives four possible approaches for FETCH and as
  many for STORE. IMO, as of this change our handling of STORE and
  FETCH is as good as any of those four. Less advanced, but a lot
  simpler.

  Hm. There is a bit of a race condition, e.g. if store and expunge
  are sent at the same time, or very nearly so. One of them will be
  processed first. If that's expunge, store will fail with a "no -
  database error". I suppose that's okay. It only happens if the store
  is processed before we spread the word about the expunged message.


Consider RFC2231:

  2231 says: IMAP4 [RFC-2060] servers SHOULD decode parameter value
  continuations when generating the BODY and BODYSTRUCTURE fetch
  attributes.

  Hopefully we don't need to care about this at all.

  Arnt's opinion: We're better off doing that at parse time. There's
  also some outlook breakage to support - it uses 2047 when it
  shouldn't.


Keeping stderr open

  Maybe we should keep it open forever. Maybe that should be a
  command-line option - but what should the default be?


Logging to syslog

  logfile=syslog:local2 could mean "log to syslog with the local2
  facility". that's ugly syntax. parsing and blah.

  if we implement this, the logd HUP handler can switch to syslog if
  it can't reopen the logfile.


We need a SIEVE interpreter.


Clean up SubDir/SubInclude

  Rename them as Modules. Module X, Use X. Tie library use and headers
  to modules, so users get just the -I and -l arguments needed from
  the modules used (even if the entire tree is being compiled).

  Also give Program a third argument, so it takes the result name, the
  file sets to compile, and (new ->) the file containing main()


Autoresponder

  We'll need one, nicely programmable, connected to our sieve.

  I was reminded of this by Google's wording:

  Thank you for writing to Google. This automated response is just to
  let you know that we've received your email, and you'll hear from us
  soon.

  Thank you for using Google.

  Regards,
  The Google Team


Search folders

  This gets more tricky each time I think about it. In particular, if
  the search encompasses dynamic message attributes, then assigning
  UIDs reliably requires us to store the UIDs in the database.


ANNOTATE support

  Annotations are good. We want them. They're easy for us. By now the
  draft should be stable, so we can implement whenever we want to and
  have the time.


ANNOTATEMORE

  Ditto. Separate point so that we can do one without the other.


Message arrival tag

  Once annotate is done, we want a tag, ie. a magic annotation which
  stays glued to the message wherever it goes, even after copy/move.

  We also want a way to store the original RFC822 format somewhere
  inside and/or outside the database, indexed by the arrival tag
  identifier. It's good if the tag is split, so we can have "x-y"
  where X is the CD/DVD number and Y is the file on the CD/DVD. Or
  something like that.


Message Retention Policy Framework

  A lot of sites will want explicit policies regarding what mail may
  not be deleted, what may be deleted, and what must be deleted. We
  can support that well.


SASL NTLM authentication

  It may be odd and undocumented, and it may not be as strong as
  DIGEST-MD5, but it's implemented in Certain Clients ;)

  http://www.innovation.ch/java/ntlm.html seems to be a reasonable
  description. Cyrus also implements it.


Schema documentation

  I've done all I want to sql-schema.html and postgres.schema; I'll have
  to wait for Sujai's diagram to complete schema.html, but until then, I
  have done all I can to it.


Web site proofreading

  Need a comprehensive proofreading session.


Web Style Guide

  Must add a section about the phrasing, what sort of language we
  used. Added by request of the CTO.

  Also a section on terminology. Manpage, man page or manual page?


Web page appearance/voice

  Right now, our pages look much the same, but differ in detail. It'd
  be good to have a formally decided look and feel, and update the
  pages to use that, and only that. For example, what's the "related
  pages" headline called, "pages" or "links", and is the second word
  capitalized?


"Writing Secure Code"

  We have a page about security, /mailstore/security.html, and a
  section of the mailstore.7 man page mentions it too.

  We need to look at ISBN 0735617228 and improve security.html with
  points from it. It could also be that we'll improve the code itself.


udoc stuff:

  1. Support a single level of nested classes. (What file names to use
     for output?)
  2. Support enum annotation.
  3. Suppress empty <p>, duplicate anchor names in output.


Udoc web pages chores

  Add "Related Pages" etc. Clarify where background.html
  fits. usage.html is an orphan now; should it become a manpage?


archives.oryx.com


Miscellaneous cleanups:

  * Get rid of Blah::setup wherever possible
  * Avoid unnecessary header file inclusion
  * Enable the #ifdef'ed out tests
  * Do the "uint characters[256]" thing to simplify parsing.


GC speedups

  At the moment, sweep() tends to look at all of RAM. if we move the
  .marked bits into a bitmap like the "allocated" bitmap, we can avoid
  that.

  It would also be very good if we could avoid sweeping every
  Allocator during every sweep. Perhaps we should sweep only
  Allocators that are full or have seen some activity. Or something.


C/R

  C/R sucks. But it has its uses, so we can benefit from implementing
  it somehow. Here are some classes of messages we may want to treat
  specially:

  - replies to own mail
  - messages in languages not understood by the user
  - mail from previously unknown addresses
  - mail from freemail providers
  - vacation responses from unknowns
  - messages likely, but not certain to be out-of-office-autoreply

  The questions are: How can we ensure that we almost never challenge
  real mail, while simultaneously challenging most/all messages that
  don't come from valid senders? How can we provide suitable
  configuration?


LogClient::reconnect should die, or at least suck less.


Log::~Log() calls commit(), but Log::id is already broken.

  Running "ms create user ..." is a good way to reproduce this SIGABRT
  (caused by Log::commit using "id + ...").


bin/ms really needs cleaning up.


DELETE of mailboxes in inappropriately qualified (security problem)

  At present, the user always needs to have all three rights, and
  there's a race condition against append/copy. It would be better to
  grab the uidnext lock and do more fine-grained checking:

  1. Require DeleteMessages unless all messages have \deleted.

  2. Require Expunge if there are any messages at all.

  The race condition means it's possible to append to a mailbox
  while it's being deleted, and the message will reappear if the
  mailbox is later recreated.


RENAME isn't implemented

  Implementing it should be a reasonably simple matter. May be best
  to put it off until ocd forwards information about mailboxes,
  though.


Case sensitivity

  Do we want case sensitive user names? Email addresses? I think not,
  but perhaps some sites do want that.

  If we have any case sensitivity, we should try to be case-friendly:

     a login AbhIjIt "QREWCejfhfeuwhrxfa"
     * ALERT User name "Abhijit", not "AbhIjIt"
     a NO no such user

  Bad security? User-friendly.


RFC 2359

  Not really important, but simple and nice. arnt started on it, and
  will probably finish it eventually.


Our httpd should be able to serve its own css: /default.css?

  > Why should it be able to?

  So we can demonstrate it at trade fairs where we don't have Internet
  access. :-)

  > Does the same apply for favicon.ico?

  I'm not sure any more. Maybe it's good enough to serve both from
  oryx.com; it's just that we've had problems with that more than
  once.


Get rid of the field_names table? (thanks to Tony at Perforce).


Split the folder view into pages.

  The injector needs to do threading to make the paging possible.


The tsearch2 trigger doesn't work

  "Can't find configuration by locale" errors, and they make the
  Injector very unhappy.


We need some sort of bulk loading for messages.


A failing parse message should invalidate the prepared statement cache.


We should reject 8-bit content in headers.

  > Is that to say that we don't?

  I found a message with some junk in the header (^H and some other
  stuff) killed Postgres (A message saying "Unicode characters above
  0x10000 are not supported", then a server crash) when I delivered it.
  It wasn't in a field that could be 2047 encoded, and I can't see what
  to do about it other than reject it. We certainly shouldn't be trying
  to feed it into Postgres unmodified.

  > I know that we don't in the cases where we discard the data
  > unparsed. For example, comments in Date fields. But do we reject
  > anything else? And what are the arguments for rejecting, anyway?
  >
  > (Not trying to be a bastard. This one just seemed a little short on
  > self-evidential truth.)


How do we cope with PostgreSQL server crashes?

  > We reconnect when we can, ie. when TCP/IP is used, and if not, we
  > fall over and die horribly, in a graceless and untested manner.

  Right. In fact, I should have written "Look into what happens when the
  Postgres server crashes" (it doesn't accept immediate reconnections).
  I observed nasty behaviour at Linuxtag, but didn't have the time to
  try to reproduce it.


Pine bodystructure problems (torture-test)


We don't handle message/non-rfc822 bodyparts well.


Update /events/linuxtag2005.html

  It claims it'll be updated. The home page (what home page?) too says
  "we will update". Oops.


Update doc/recorder.man

  Must decide whether to use .SS or .IP, etc.


Look into supporting the MySQL protocol after 1.0


Look at cryptlib error messages after 0.96.

  We report some things as errors that may be just ordinary EOF-like
  conditions.


Error handling in the Injector needs another look.

  (I saw some horrible failures at Linuxtag. I just need to go over the
  logs.)


We need to support date field searches.


We need to support stored search "folders".


Orphaned bodyparts should be cleaned up somehow.


httpd should learn to stream result pages to reduce memory use.


We should get rid of recent_messages (see email from Arnt).


We need mUTF-7 support.


We need more IMAP scripts and message parsing and assembly tests.


canonical should try harder to be helpful

  (For example, add CRs to bare LFs in the input to avoid bad diffs.)


Write better field wrapping code

  HeaderField::wrap is terribly hackish right now. Besides, ::unwrap()
  should become the higher-level parser's job.


We assume that all Content-Type fields conform to MIME.

  In fact, RFC 1049 defines a non-MIME Content-Type (and Arnt says the
  Sun mailer had an incompatible one). The "Content-Type: text" parser
  hack I added turns out to have been for such a non-MIME field.

  I don't know what to do about this.


The servers should accept (a set of) "db-mirror" settings to define a
read-only local database mirror.

  That way, we can play nicely with most replication systems.



